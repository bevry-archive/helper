// Generated by CoffeeScript 1.7.1
(function() {
  var Analytics, CM_API_KEY, CM_LIST_ID, CreateSend, PORT, SEGMENT_SECRET, analytics, app, connect, createSend, extendr, human, logError, logger, spamUsers, util,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CreateSend = require('createsend-node');

  Analytics = require('analytics-node');

  extendr = require('extendr');

  connect = require('connect');

  util = require('util');

  logger = new (require('caterpillar').Logger)();

  human = new (require('caterpillar-human').Human)();

  logger.pipe(human).pipe(process.stdout);

  SEGMENT_SECRET = process.env.SEGMENT_SECRET || null;

  CM_API_KEY = process.env.CM_API_KEY || null;

  CM_LIST_ID = process.env.CM_LIST_ID || null;

  PORT = process.env.PORT || 8000;

  spamUsers = ['55c7a10d69feeae52b991ba69e820c29aa1da960', 'ef87bc3cbb56a7d48e8a5024f9f33706b8146591'];

  if (!CM_API_KEY) {
    throw new Error('CM_API_KEY is undefined');
  }

  if (!CM_LIST_ID) {
    throw new Error('CM_LIST_ID is undefined');
  }

  if (!SEGMENT_SECRET) {
    throw new Error('SEGMENT_SECRET is undefined');
  }

  analytics = new Analytics(SEGMENT_SECRET);

  createSend = new CreateSend({
    apiKey: CM_API_KEY
  });

  app = connect();

  logError = function(err) {
    if (err) {
      return logger.log('err', err.stack || err.message || err);
    }
  };

  process.on('uncaughtException', logError);

  app.use(connect.limit('200kb'));

  app.use(connect.timeout());

  app.use(connect.compress());

  app.use(connect.query());

  app.use(connect.json());

  app.use(function(req, res) {
    var ipAddress, sendError, sendResponse, sendSuccess, subscriberData, _base, _base1, _ref;
    ipAddress = req.headers['X-Forwarded-For'] || req.connection.remoteAddress;
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Request-Method', '*');
    res.setHeader('Access-Control-Allow-Methods', 'OPTIONS, GET');
    res.setHeader('Access-Control-Allow-Headers', '*');
    if (req.method === 'OPTIONS') {
      res.writeHead(200);
      res.end();
      return;
    }
    sendResponse = function(data, code) {
      var level, str;
      if (code == null) {
        code = 200;
      }
      str = null;
      res.writeHead(code, {
        'Content-Type': 'application/json'
      });
      if (req.query.callback) {
        str = req.query.callback + '(' + JSON.stringify(data) + ')';
      } else {
        str = JSON.stringify(data);
      }
      level = code === 200 ? 'info' : 'warning';
      logger.log(level, "" + code + " response:", str);
      res.write(str);
      return res.end();
    };
    sendError = function(message, data, code) {
      var responseData;
      if (data == null) {
        data = {};
      }
      if (code == null) {
        code = 400;
      }
      responseData = extendr.extend({
        success: false,
        error: message
      }, data);
      return sendResponse(responseData, code);
    };
    sendSuccess = function(data, code) {
      var responseData;
      if (data == null) {
        data = {};
      }
      if (code == null) {
        code = 200;
      }
      responseData = extendr.extend({
        success: true
      }, data);
      return sendResponse(responseData, code);
    };
    logger.log('info', 'received request:', req.url, req.query, req.body);
    if (!req.query.method) {
      return sendError('missing method');
    }
    switch (req.query.method) {
      case 'ping':
        return sendSuccess();
      case 'add-subscriber':
        subscriberData = {
          EmailAddress: req.query.email || req.body.email,
          Name: req.query.name || req.body.name || null,
          Resubscribe: true,
          CustomFields: [
            {
              Key: 'username',
              Value: req.query.username || req.body.username || null
            }
          ]
        };
        return createSend.subscribers.addSubscriber(CM_LIST_ID, subscriberData, function(err, subscriber) {
          var email;
          email = (subscriber != null ? subscriber.emailAddress : void 0) || null;
          if (err) {
            return sendError(err.message, {
              email: email
            });
          }
          return sendSuccess({
            email: email
          });
        });
      case 'analytics':
        if (Object.keys(req.body).length === 0) {
          return sendError('missing body', req.body);
        }
        if (!req.body.userId) {
          req.body.userId = 'undefined';
          logger.log('warn', 'no user on track:', req.url, req.query, req.body);
        } else if (_ref = req.body.userId, __indexOf.call(spamUsers, _ref) >= 0) {
          return sendError('spam user');
        }
        (_base = req.body).context || (_base.context = {});
        (_base1 = req.body.context).ip || (_base1.ip = ipAddress);
        console.log('analytics:', req.query.action, '\n', util.inspect(req.body), '\n');
        switch (req.query.action) {
          case 'identify':
            analytics.identify(req.body, logError);
            break;
          case 'track':
            analytics.track(req.body, logError);
            break;
          default:
            return sendError('unknown action');
        }
        return sendSuccess();
      default:
        return sendError('unknown method');
    }
  });

  app.listen(PORT, function() {
    return logger.log('info', 'opened server on', PORT);
  });

  module.exports = app;

}).call(this);
